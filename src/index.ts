import { app, BrowserWindow, session, ipcMain, dialog } from 'electron';
import path from 'path';
import utf8 from 'utf8';
// import fs from 'fs';
import StreamZip from 'node-stream-zip';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false, // is default value after Electron v5
      contextIsolation: true, // protect against prototype pollution
      enableRemoteModule: false, // turn off remote
      preload: path.resolve(app.getAppPath(), 'src/preload.js'), // use a preload script
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
//   callback({ responseHeaders: Object.assign({
//       "Content-Security-Policy": [ "default-src 'self'" ]
//     }, details.responseHeaders)});
// });

ipcMain.on('click', () => console.log('do something'));

ipcMain.on('app:on-fs-dialog-open', async (event) => {
  console.log('app:on-fs-dialog-open');
  const { filePaths, canceled } = await dialog.showOpenDialog({
    properties: ['multiSelections'],
    filters: [{ name: 'Facebook backup zips', extensions: ['zip'] }],
  });
  if (canceled) {
    return [];
  }

  console.log('XDDXD  XD', filePaths);
  const allUsersSet = new Set<string>();
  await Promise.all(
    filePaths.map(async (file) => {
      const zip = new StreamZip.async({ file });
      const allFiles = await zip.entries();
      const fileNames = Object.keys(allFiles);
      const usersAll = fileNames
        .filter((name) => name.startsWith('messages/inbox/') && name.split('/').length >= 3)
        .map((name) => name.split('/')[2])
        .filter((name) => name.length > 0);
      usersAll.forEach((user) => allUsersSet.add(user));
      const unique = new Set(usersAll);
      const uniqueArr = Array.from(unique);

      await Promise.all(uniqueArr.map(async user => {
        const msgFileName = `messages/inbox/${user}/message_1.json`;
        if (allFiles[msgFileName]) {
          const msg_data = await zip.entryData(allFiles[msgFileName]);
          const msg_parsed = JSON.parse(msg_data.toString());
          console.log(`[${file}] ${utf8.decode(msg_parsed.title || msg_parsed.thread_path)}`);
        }
      }))

      // console.log(fileNames);
      await zip.close();
    })
  );

  const allUsers = Array.from(allUsersSet).sort();
  // allUsers.forEach(u => console.log(u))
  // console.log(allUsers);

  return filePaths;
});
